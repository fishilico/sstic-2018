Script de déchiffrement de payload.js
=====================================

.. raw:: latex

     \label{sect:ann-decrypt-payload}
     Voici le script Python que j'ai utilisé pour décrypter le contenu de \texttt{payload.js} et ainsi extraire \texttt{/tmp/.f4ncyn0un0urs} (cf. section \ref{sect:1-chiffrement-russe}).

.. code-block:: python

    #!/usr/bin/env pypy3
    # -*- coding: utf-8 -*-
    import base64
    
    # Charge le contenu de payload.js
    with open('payload.js', 'r') as f:
        payload = f.read()
        assert payload.startswith("const payload = '")
        assert payload.endswith("'\n\n")
        _, payload, _ = payload.split("'")
        payload = base64.b64decode(payload)
    
    # Fonction de déobfuscation de stage2.js
    def d(x):
        return ((200 * x * x) + (255 * x) + 92) % 0x100
    
    # Données présentées comme "static const u8 data_segment_data_0[]" dans le code C
    # produit par wasm2c
    data_segment_data_0 = bytes((
        0xdc, 0x63, 0x7a, 0x21, 0x58, 0x1f, 0x76, 0x5d, 0xd4, 0xdb, 0x72, 0x99,
        0x50, 0x97, 0x6e, 0xd5, 0xcc, 0x53, 0x6a, 0x11, 0x48, 0x0f, 0x66, 0x4d,
        0xc4, 0xcb, 0x62, 0x89, 0x40, 0x87, 0x5e, 0xc5, 0xbc, 0x43, 0x5a, 0x01,
        0x38, 0xff, 0x56, 0x3d, 0xb4, 0xbb, 0x52, 0x79, 0x30, 0x77, 0x4e, 0xb5,
        0xac, 0x33, 0x4a, 0xf1, 0x28, 0xef, 0x46, 0x2d, 0xa4, 0xab, 0x42, 0x69,
        0x20, 0x67, 0x3e, 0xa5, 0x9c, 0x23, 0x3a, 0xe1, 0x18, 0xdf, 0x36, 0x1d,
        0x94, 0x9b, 0x32, 0x59, 0x10, 0x57, 0x2e, 0x95, 0x8c, 0x13, 0x2a, 0xd1,
        0x08, 0xcf, 0x26, 0x0d, 0x84, 0x8b, 0x22, 0x49, 0x00, 0x47, 0x1e, 0x85,
        0x7c, 0x03, 0x1a, 0xc1, 0xf8, 0xbf, 0x16, 0xfd, 0x74, 0x7b, 0x12, 0x39,
        0xf0, 0x37, 0x0e, 0x75, 0x6c, 0xf3, 0x0a, 0xb1, 0xe8, 0xaf, 0x06, 0xed,
        0x64, 0x6b, 0x02, 0x29, 0xe0, 0x27, 0xfe, 0x65, 0x5c, 0xe3, 0xfa, 0xa1,
        0xd8, 0x9f, 0xf6, 0xdd, 0x54, 0x5b, 0xf2, 0x19, 0xd0, 0x17, 0xee, 0x55,
        0x4c, 0xd3, 0xea, 0x91, 0xc8, 0x8f, 0xe6, 0xcd, 0x44, 0x4b, 0xe2, 0x09,
        0xc0, 0x07, 0xde, 0x45, 0x3c, 0xc3, 0xda, 0x81, 0xb8, 0x7f, 0xd6, 0xbd,
        0x34, 0x3b, 0xd2, 0xf9, 0xb0, 0xf7, 0xce, 0x35, 0x2c, 0xb3, 0xca, 0x71,
        0xa8, 0x6f, 0xc6, 0xad, 0x24, 0x2b, 0xc2, 0xe9, 0xa0, 0xe7, 0xbe, 0x25,
        0x1c, 0xa3, 0xba, 0x61, 0x98, 0x5f, 0xb6, 0x9d, 0x14, 0x1b, 0xb2, 0xd9,
        0x90, 0xd7, 0xae, 0x15, 0x0c, 0x93, 0xaa, 0x51, 0x88, 0x4f, 0xa6, 0x8d,
        0x04, 0x0b, 0xa2, 0xc9, 0x80, 0xc7, 0x9e, 0x05, 0xfc, 0x83, 0x9a, 0x41,
        0x78, 0x3f, 0x96, 0x7d, 0xf4, 0xfb, 0x92, 0xb9, 0x70, 0xb7, 0x8e, 0xf5,
        0xec, 0x73, 0x8a, 0x31, 0x68, 0x2f, 0x86, 0x6d, 0xe4, 0xeb, 0x82, 0xa9,
        0x60, 0xa7, 0x7e, 0xe5, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x64, 0x28, 0x24, 0x30,
        0x29, 0x3b, 0x20, 0x7d, 0x00, 0x94, 0x20, 0x85, 0x10, 0xc2, 0xc0, 0x01,
        0xfb, 0x01, 0xc0, 0xc2, 0x10, 0x85, 0x20, 0x94, 0x01, 0xbb, 0x6b, 0xd9,
        0xcf, 0x25, 0x71, 0xef, 0x52, 0x52, 0xbd, 0x1b, 0xfc, 0x09, 0x6e, 0x41,
        0xbe, 0x9b, 0x28, 0xea, 0x83, 0x5c, 0x3f, 0x08, 0x80, 0x7e, 0x13, 0xda,
        0xfd, 0xe9, 0xd8, 0x84, 0x97, 0x93, 0xb2, 0xac, 0xc6, 0x79, 0xf1, 0x5a,
        0x70, 0x91, 0xf2, 0xc7, 0x74, 0xb8, 0xa2, 0xf0, 0xa6, 0x2b, 0x39, 0xf2,
        0x70, 0xc8, 0x87, 0xae, 0x96, 0xc4, 0x0f, 0xbe, 0x85, 0x2e, 0x53, 0xd0,
        0x8d))
    
    SBOX = data_segment_data_0[:256]
    POLYNOM = data_segment_data_0[281:296]
    
    # La SBox est en fait la réciproque de la fonction d
    assert all(d(SBOX[x]) == x == SBOX[d(x)] for x in range(256))
    
    # Implémente la fonction P et sa réciproque, en utilisant POLYNOM
    def mangle_with_polynom_byte(databyte, polynom_byte):
        assert 0 <= polynom_byte < 256
        assert 0 <= databyte < 256
        newbyte = 0
        while polynom_byte:
            if polynom_byte & 1:
                newbyte ^= databyte
            databyte = ((0xc3 if databyte & 0x80 else 0) ^ (databyte << 1)) & 0xff
            polynom_byte = polynom_byte >> 1
        return newbyte
    
    def p_encrypt(block):
        assert len(block) == 16
        for _ in range(16):
            curbyte = block[15]
            for i in range(14, -1, -1):
                block[i + 1] = x = block[i]
                curbyte ^= mangle_with_polynom_byte(databyte=x, polynom_byte=POLYNOM[i])
            block[0] = curbyte
    
    def p_decrypt(block):
        assert len(block) == 16
        for _ in range(16):
            curbyte = block[0]
            for i in range(1, 16):
                block[i - 1] = x = block[i]
                curbyte ^= mangle_with_polynom_byte(databyte=x, polynom_byte=POLYNOM[i - 1])
            block[15] = curbyte
    
    # Compose 9 fois la réciproque de P
    def p_decrypt_9(block):
        block = bytearray(block)
        for _ in range(9):
            p_decrypt(block)
        return block
    
    # La fonction decryptData(data, password) découpe le contenu de payload.js
    payload = bytes(d(x) for x in payload)
    salt = payload[:16]
    iv = payload[16:32]
    encrypted = payload[32:]
    
    # Calcule C_K à partir du premier bloc chiffré et de son déchiffré connu
    FIRST_BLOCK = b'-Fancy Nounours-'
    clear_xor_iv = bytes(c ^ i for c, i in zip(FIRST_BLOCK, iv))
    C_K = bytes(d(c) ^ p9 for c, p9 in zip(clear_xor_iv, p_decrypt_9(encrypted[:16])))
    
    # Décrypte l'ensemble des données (sans connaître la clé de chiffrement utilisée)
    with open('f4ncyn0un0urs', 'wb') as fout:
        for iblk in range(len(encrypted) // 16):
            # Déchiffre le bloc de 16 octets avec C_K et S et le mode CBC
            block = p_decrypt_9(encrypted[16 * iblk:16 * iblk + 16])
            for i in range(16):
                block[i] = SBOX[block[i] ^ C_K[i]] ^ iv[i]
    
            if iblk > 0:
                fout.write(block)
            iv = encrypted[16 * iblk:16 * iblk + 16]
